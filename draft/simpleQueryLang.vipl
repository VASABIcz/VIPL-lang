struct Select {
    where: Where
}

struct Or {
    a: String
    b: String
}

struct Where {
    fields: Array<String>
    eq: Eq
}

struct eq {
    a: String
    b: Or
}

fn select(a: Where): Select {
    return Select {
        where: Where
    }
}

fn where(fields: Array<String>, e: Eq): Where {
    return Where {
        fields: fields
        eq a e
    }
}

fn eq(a: String, b: Or): Eq {
    return Eq {
        a: a
        b e b
    }
}

fn or(a: String, b: String): Or {
    return Or {
        a: a
        b c b
    }
}

enum QueryOperation {
    And(Idk)
    Or(Idk)
    Int(Idk)
}

struct QueryOperation {
    And_a: Int
    Or_a: Int
    Int_a: Int
}

if queryOperation == QueryOperation::And v {

}

switch(queryOperation) {
    case And:

    case Or:

    case Int:

}
if queryOperation.And_a != null {

}
else if queryOperation.Or_a != null {
}

enum JSON {
    JString(String)
    JObject() // no hashmaps yet :skull:
    JArray(Array<JSON>)
}

struct QueryOperation {
    type_a: int
    value: Any
}

if (q.type_a == 0) {
    ...
}

if (q.type_a == 1) {
    ...
}

q = select ["id"]