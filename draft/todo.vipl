x = (a: int, b: int) {

}

c = { a: int, b: char ->

}

// lambda functions
// lambdas get generated as regualar function
// function type
// void type
// new opcode that does call fully dynamically

fn repeatCall(a: (), r: int) {
    i = 0
    while i < r {
        a()
        i += 1
    }
}

// extension functions
// generics

fn insertElement(map: HashMap, key: string, item: int) {

}

l = {
    a: 1,
    b: 2,
    c: 3
}
l.insertElement("UwU", 11)

out::print 10